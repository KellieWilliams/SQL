--The following are example SQL queries posed by the website HackerRank.com in their Prepare module, answered using MySQL.
--My HackerRank profile page showing my badges and certificates is here: https://www.hackerrank.com/krwilliams

--Revising the SELECT Query I: Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT * FROM city
WHERE countrycode = 'USA'
  AND population > 100000;

--Revising the SELECT Query II: Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

SELECT name FROM city
  WHERE countrycode = 'USA'
  AND population > 120000;

--SELECT All: Query all columns (attributes) for every row in the CITY table.

SELECT * FROM city;

--Select by ID: Query all columns for a city in CITY with the ID 1661.

SELECT * FROM city
WHERE ID = 1661;

-- Revising Aggregations - The Count Function: Query a count of the number of cities in CITY having a Population larger than 100,000.

SELECT COUNT(DISTINCT name) FROM City
WHERE population > 100000;

--Revising Aggregations - The Sum Function: Query the total population of all cities in CITY where District is California.

Select SUM(population) from CITY
WHERE district = 'California';

--Revising Aggregations - Averages: Query the average population of all cities in CITY where District is California.

SELECT AVG(population) FROM CITY
WHERE district = 'California';

--Average Population: Query the average population for all cities in CITY, rounded down to the nearest integer.

SELECT ROUND(AVG(POPULATION)) FROM CITY;

--Population Density Difference: Query the difference between the maximum and minimum populations in CITY.

SELECT MAX(POPULATION)-MIN(POPULATION) FROM CITY;

--Japanese Cities' Attributes: Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT * FROM city
WHERE countrycode = 'JPN';

--Japanese Cities' Names: Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT name FROM city
WHERE countrycode = 'JPN';

--Japan Population: Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

SELECT SUM(population) FROM CITY
WHERE COUNTRYCODE = 'JPN';

--Population Census: Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'. Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT SUM(CITY.POPULATION)
  FROM CITY
JOIN COUNTRY
  ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE CONTINENT = 'Asia';

--African Cities: Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'. Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT CITY.NAME
  FROM CITY
JOIN COUNTRY
  ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE COUNTRY.CONTINENT = 'Africa';

--Average Population of Each Continent: Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer. Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
  FROM CITY
JOIN COUNTRY
  ON CITY.COUNTRYCODE = COUNTRY.CODE
GROUP BY COUNTRY.CONTINENT;

--Weather Observation Station 1: Query a list of CITY and STATE from the STATION table.

SELECT city, state FROM station;

--Weather Observation Station 2: Query the following two values from the STATION table:
--The sum of all values in LAT_N rounded to a scale of  decimal places.
--The sum of all values in LONG_W rounded to a scale of  decimal places.

SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2) FROM STATION;

--Weather Observation Station 3: Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT DISTINCT CITY FROM STATION
WHERE MOD(ID,2) = 0;

--Weather Observation Station 4: Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

SELECT COUNT(CITY)-COUNT(DISTINCT CITY) FROM STATION;

--Weather Observation Station 5: Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

(SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1)
UNION
(SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1);

--Weather Observation Station 6: Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY LIKE 'A%'
    OR CITY LIKE 'E%'
    OR CITY LIKE 'I%'
    OR CITY LIKE 'O%'
    OR CITY LIKE 'U%';

--Weather Observation Station 7: Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY LIKE '%A'
    OR CITY LIKE '%E'
    OR CITY LIKE '%I'
    OR CITY LIKE '%O'
    OR CITY LIKE '%U';

--Weather Observation Station 8: Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE (
    CITY LIKE 'A%'
    OR CITY LIKE 'E%'
    OR CITY LIKE 'I%'
    OR CITY LIKE 'O%'
    OR CITY LIKE 'U%')
  AND (
    CITY LIKE '%A'
    OR CITY LIKE '%E'
    OR CITY LIKE '%I'
    OR CITY LIKE '%O'
    OR CITY LIKE '%U');

--Weather Observation Station 9: Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY NOT LIKE 'A%'
    AND CITY NOT LIKE 'E%'
    AND CITY NOT LIKE 'I%'
    AND CITY NOT LIKE 'O%'
    AND CITY NOT LIKE 'U%';

--Weather Observation Station 10: Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE CITY NOT LIKE '%A'
    AND CITY NOT LIKE '%E'
    AND CITY NOT LIKE '%I'
    AND CITY NOT LIKE '%O'
    AND CITY NOT LIKE '%U';

--Weather Observation Station 11: Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE (CITY NOT LIKE 'A%'
    AND CITY NOT LIKE 'E%'
    AND CITY NOT LIKE 'I%'
    AND CITY NOT LIKE 'O%'
    AND CITY NOT LIKE 'U%')
  OR  
    (CITY NOT LIKE '%A'
    AND CITY NOT LIKE '%E'
    AND CITY NOT LIKE '%I'
    AND CITY NOT LIKE '%O'
    AND CITY NOT LIKE '%U');

--Weather Observation Station 12: Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION
WHERE (CITY NOT LIKE 'A%'
    AND CITY NOT LIKE 'E%'
    AND CITY NOT LIKE 'I%'
    AND CITY NOT LIKE 'O%'
    AND CITY NOT LIKE 'U%')
  AND  
    (CITY NOT LIKE '%A'
    AND CITY NOT LIKE '%E'
    AND CITY NOT LIKE '%I'
    AND CITY NOT LIKE '%O'
    AND CITY NOT LIKE '%U');

--Weather Observation Station 13: Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345. Truncate your answer to 4 decimal places.

SELECT TRUNCATE(SUM(LAT_N), 4) FROM STATION
WHERE LAT_N BETWEEN 38.7880 AND 137.2345;

--Weather Observation Station 14: Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345. Truncate your answer to 4 decimal places.

SELECT TRUNCATE(MAX(LAT_N), 4) FROM STATION
WHERE LAT_N < 137.2345;

--Weather Observation Station 15: Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than 137.2345. Round your answer to 4 decimal places.

SELECT ROUND(LONG_W, 4) FROM STATION
WHERE LAT_N < 137.2345
ORDER BY LAT_N DESC
LIMIT 1;

--Weather Observation Station 16: Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to 4 decimal places.

SELECT ROUND(MIN(LAT_N), 4) FROM STATION
WHERE LAT_N > 38.7780;

--Weather Observation Station 17: Query the Western Longitude (LONG_W) where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to 4 decimal places.

SELECT ROUND(LONG_W, 4) FROM STATION
WHERE LAT_N > 38.7780
ORDER BY LAT_N ASC
LIMIT 1;

--Weather Observation Station 18: Consider P1(a,b) and P2(c,d) to be two points on a 2D plane.
--a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
--b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
--c happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
--d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
--Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.
--The Manhattan Distance is the distance between two points measured along axes at right angles. In a plane with P1 at (a,b) and P2 at (c,d), it is ABS(a-c)+ABS(b-d).

SELECT ROUND(ABS(MIN(LAT_N)-MAX(LAT_N))+ABS(MIN(LONG_W)-MAX(LONG_W)), 4) FROM STATION;

--Weather Observation Station 19: Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
--Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits.
--The Euclidean Distance is the length of the line between two points. Since P1 and P2 have two Cartesian coordinates, this is on a 2D plane; therefore the Euclidean Distance is calculated by using the Pythagorean theorem: d(P1,P2) = SQRT(POWER(b-a,2)+POWER(d-c,2)).

SELECT ROUND(SQRT(POWER(MAX(LAT_N)-MIN(LAT_N),2)+POWER(MAX(LONG_W)-MIN(LONG_W),2)),4) FROM STATION;

--Weather Observation Station 20: A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places.

SET @row_index := -1;
SELECT ROUND(LAT_N, 4)
FROM (
    SELECT @row_index:=@row_index + 1 AS row_index, LAT_N
     FROM STATION
     ORDER BY LAT_N
    ) AS median
WHERE median.row_index
IN (FLOOR(@row_index/2), CEIL(@row_index/2));

--Higher Than 75 Marks: Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT Name from STUDENTS
WHERE Marks > 75
ORDER BY SUBSTRING(Name, -3) ASC, ID ASC;

--Employee Names: Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT name from Employee
ORDER BY name ASC;

--Employee Salaries: Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending employee_id.

SELECT name from Employee
WHERE salary > 2000
 AND months < 10
ORDER BY employee_id ASC;

--The PADS: Generate the following two result sets:
--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
--Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:
--There are a total of [occupation_count] [occupation]s.
--where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
--Note: There will be at least two entries in the table for each type of occupation.

SELECT CONCAT(name, '(', LEFT(occupation,1), ')')
    FROM OCCUPATIONS
    ORDER BY NAME ASC;
SELECT CONCAT("There are a total of ", COUNT(occupation), " ", LOWER(occupation), "s.")
    FROM OCCUPATIONS
    GROUP BY OCCUPATION
    ORDER BY COUNT(occupation), occupation ASC;

--Type of Trianlge: Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
--Equilateral: It's a triangle with  sides of equal length.
--Isosceles: It's a triangle with  sides of equal length.
--Scalene: It's a triangle with  sides of differing lengths.
--Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT  
    CASE
        WHEN A + B > C AND A + C > B AND B + C > A THEN 
            (CASE
                WHEN A=B AND B=C THEN "Equilateral"
                WHEN A=B OR A=C OR B=c THEN "Isosceles"
                ELSE "Scalene"
            END)
        ELSE "Not A Triangle"
    END AS Type_of_Triangle
FROM TRIANGLES;

--Draw the Triangle 1: P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
--* * * * * 
--* * * * 
--* * * 
--* * 
--*
--Write a query to print the pattern P(20).

SET @INDEX := 21;
SELECT REPEAT('* ', @INDEX:= @INDEX - 1)
FROM INFORMATION_SCHEMA.TABLES;

--Draw the Triangle 2: P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
--* 
--* * 
--* * * 
--* * * * 
--* * * * *
--Write a query to print the pattern P(20).

SET @INDEX := 0;
SELECT REPEAT('* ', @INDEX:= @INDEX + 1)
FROM INFORMATION_SCHEMA.TABLES
LIMIT 20;

--The Blunder: Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's 0 key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.
--Write a query calculating the amount of error (i.e.: actual-miscalculated average monthly salaries), and round it up to the next integer.

SELECT CEIL(AVG(salary) - AVG(replace(salary,0,""))) FROM Employees;

--Top Earners: We define an employee's total earnings to be their monthly salary * months worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as 2 space-separated integers.

SELECT MAX(months*salary), COUNT(months*salary)
FROM Employee
WHERE (months*salary) = (SELECT MAX(months*salary) FROM Employee);
